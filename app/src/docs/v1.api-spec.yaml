---
openapi: 3.0.3
info:
  version: 1.0.0
  title: Common Object Management Service (COMS)
  description: A microservice for managing access control to S3 Objects
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: NR Common Service Showcase
    email: NR.CommonServiceShowcase@gov.bc.ca
servers:
  - url: /api/v1
    description: This Server
security:
  - BasicAuth: []
  - BearerAuth: []
    OpenID: []
tags:
  - name: Bucket
    description: >-
      Operations for managing S3 Bucket(s). Certain operations not
      available without a database.
    externalDocs:
      url: >-
        https://github.com/bcgov/common-object-management-service/wiki/Endpoint-Notes#bucket
  - name: Bucket Permission
    description: >-
      Operations for managing S3 Bucket permissions. Not available
      without a database.
    externalDocs:
      url: >-
        https://github.com/bcgov/common-object-management-service/wiki/Endpoint-Notes#permission
  - name: Metadata
    description: >-
      Operations for inspecting known COMS metadata. Certain operations not
      available without a database.
    externalDocs:
      url: >-
        https://github.com/bcgov/common-object-management-service/wiki/Endpoint-Notes#metadata
  - name: Object
    description: >-
      Operations directly influencing an S3 Object. Certain operations not
      available without a database.
    externalDocs:
      url: >-
        https://github.com/bcgov/common-object-management-service/wiki/Endpoint-Notes#object
  - name: Object Metadata
    description: Operations directly influencing the Metadata of an S3 Object.
    externalDocs:
      url: >-
        https://github.com/bcgov/common-object-management-service/wiki/Endpoint-Notes#metadata
  - name: Object Permission
    description: >-
      Operations for managing User Access Control to S3 Object permissions. Not available
      without a database.
    externalDocs:
      url: >-
        https://github.com/bcgov/common-object-management-service/wiki/Endpoint-Notes#permission
  - name: Object Tagging
    description: Operations directly influencing the Tags of an S3 Object.
    externalDocs:
      url: >-
        https://github.com/bcgov/common-object-management-service/wiki/Endpoint-Notes#tag
  - name: User
    description: >-
      Operations to list valid queryable users and identity providers. Not
      available without a database.
    externalDocs:
      url: >-
        https://github.com/bcgov/common-object-management-service/wiki/Endpoint-Notes#user
paths:
  /bucket:
    put:
      summary: Creates a bucket
      description: Creates a bucket
      operationId: createBucket
      tags:
        - Bucket
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DB-Bucket'
      responses:
        '201':
          description: Returns inserted DB bucket record
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-Bucket'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Error'
    get:
      summary: Search for buckets
      description: >-
        Returns a list of buckets matching all search criteria across all known
        versions of buckets.
      operationId: searchBuckets
      tags:
        - Bucket
      parameters:
        - $ref: '#/components/parameters/Query-BucketId'
        - $ref: '#/components/parameters/Query-Active'
        - $ref: '#/components/parameters/Query-Key'
        - $ref: '#/components/parameters/Query-BucketName'
      responses:
        '201':
          description: Returns an array of buckets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-Bucket'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /bucket/{bucketId}:
    head:
      summary: Checks if a given bucket or default bucket exists in S3
      description: Returns either a 204 or 40* if user lacks permissions
      operationId: headBucket
      tags:
        - Bucket
      parameters:
        - $ref: '#/components/parameters/Path-BucketId'
      responses:
        '204':
          description: Returns object headers
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    get:
      summary: Returns a bucket
      description: Returns a bucket based on bucketId
      operationId: readBucket
      tags:
        - Bucket
      parameters:
        - $ref: '#/components/parameters/Path-BucketId'
      responses:
        '200':
          description: Returns bucket
          $ref: '#/components/responses/Bucket'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    patch:
      summary: Updates a bucket
      description: Returns updated bucket
      operationId: updateBucket
      tags:
        - Bucket
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DB-Bucket'
      parameters:
        - $ref: '#/components/parameters/Path-BucketId'
      responses:
        '200':
          description: Returns updated bucket
          $ref: '#/components/responses/Bucket'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Deletes a bucket
      description: Delete bucket based on bucketId
      operationId: deleteBucket
      tags:
        - Bucket
      parameters:
        - $ref: '#/components/parameters/Path-BucketId'
      responses:
        '204':
          description: Returns no content success
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'

  /metadata:
    get:
      summary: Returns a list of matching metadata
      description: >-
        Gets a list of metadata matching the given parameters. Multiple Key/Value pairs
        can be provided in the headers to narrow down results. If none are provided the full set of metadata will be returned.
      operationId: getMetadata
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/Header-Metadata'
      responses:
        '200':
          description: Returns an array of matching key/value pairs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/S3-TagSet'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/Error'
  /object:
    post:
      summary: Creates new objects
      description: >-
        Create object(s) in the configured object storage. If COMS is running in
        either 'OIDC' or 'Full' mode, any objects created with OIDC user
        authentication will have all object permissions assigned to them by
        default.
      operationId: createObjects
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/Header-Metadata'
        - $ref: '#/components/parameters/Query-TagSet'
        # include bucketId query param
      requestBody:
        description: Form-data containing files
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: foobar
              properties:
                anyKey:
                  type: string
                  description: >-
                    This endpoint can accept an arbitrary number of form-data
                    keys. There must be at least one key present, and every key
                    must be unique. All keys shall contain a binary
                    representation of the file to upload. In the response, each
                    successfully uploaded file shall contain a 'fieldName'
                    property corresponding to your custom defined keys.
                  format: binary
      responses:
        '201':
          description: Returns an array of created object data
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      required:
                        - fieldName
                      properties:
                        fieldName:
                          type: string
                          description: >-
                            A unique form field chosen for the key for each file
                            in the multi-part form-data post
                          example: file1
                    - $ref: '#/components/schemas/DB-Object'
                    - $ref: '#/components/schemas/DB-Metadata'
                    - $ref: '#/components/schemas/DB-Tags'
                    - $ref: '#/components/schemas/S3-Object'
                    # response now includes Bucket, Key and Location, i think from S3.. should we document??
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    get:
      summary: Search for objects
      description: >-
        Returns a list of objects matching all search criteria across all known
        versions of objects.
      operationId: searchObjects
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/Header-Metadata'
        - $ref: '#/components/parameters/Query-ObjectId'
        - $ref: '#/components/parameters/Query-Path'
        - $ref: '#/components/parameters/Query-Active'
        - $ref: '#/components/parameters/Query-Public'
        - $ref: '#/components/parameters/Query-MimeType'
        - $ref: '#/components/parameters/Query-Name'
        - $ref: '#/components/parameters/Query-TagSet'
      responses:
        '201':
          description: Returns and array of objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-Object'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /object/{objId}:
    head:
      summary: Returns object headers
      description: Returns S3 and COMS headers for a specific object
      operationId: headObject
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-VersionId'
      responses:
        '204':
          description: Returns object headers
          headers:
            Content-Disposition:
              $ref: '#/components/headers/Content-Disposition'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Content-Type:
              $ref: '#/components/headers/Content-Type'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
            x-amz-server-side-encryption:
              $ref: '#/components/headers/x-amz-server-side-encryption'
            x-amz-version-id:
              $ref: '#/components/headers/x-amz-version-id'
            x-amz-meta-id:
              $ref: '#/components/headers/x-amz-meta-id'
            x-amz-meta-name:
              $ref: '#/components/headers/x-amz-meta-name'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    get:
      summary: Returns the object
      description: >-
        Returns the object as either a direct binary stream, an HTTP 201
        containing a direct, temporary pre-signed S3 object URL location, or
        an HTTP 302 redirect to a direct, temporary pre-signed S3 object URL
        location.
      operationId: readObject
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-Download'
        - $ref: '#/components/parameters/Query-ExpiresIn'
        - $ref: '#/components/parameters/Query-VersionId'
      responses:
        '200':
          description: Returns the object
          headers:
            Content-Disposition:
              $ref: '#/components/headers/Content-Disposition'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Content-Type:
              $ref: '#/components/headers/Content-Type'
            ETag:
              $ref: '#/components/headers/ETag'
            Last-Modified:
              $ref: '#/components/headers/Last-Modified'
            x-amz-server-side-encryption:
              $ref: '#/components/headers/x-amz-server-side-encryption'
            x-amz-version-id:
              $ref: '#/components/headers/x-amz-version-id'
            x-amz-meta-id:
              $ref: '#/components/headers/x-amz-meta-id'
            x-amz-meta-name:
              $ref: '#/components/headers/x-amz-meta-name'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '201':
          description: Returns a Presigned S3 URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response-PresignedURL'
        '302':
          $ref: '#/components/responses/S3Found'
        '304':
          $ref: '#/components/responses/NotModified'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Updates an Object
      description: >-
        Updates the object in the configured object storage. If the object
        storage supports versioning, a new version will be generated instead of
        overwriting the existing contents.
      operationId: updateObject
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/Header-Metadata'
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-TagSet'
      requestBody:
        description: Form-data containing files
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: foobar
              properties:
                anyKey:
                  type: string
                  description: >-
                    This endpoint will accept only one arbitrary form-data key.
                    That key shall contain a binary representation of the file
                    to upload. In the response, the successfully uploaded file
                    shall contain a 'fieldName' property corresponding to your
                    custom defined key.
                  format: binary
      responses:
        '200':
          description: Returns the updated object data
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - fieldName
                    properties:
                      fieldName:
                        type: string
                        description: >-
                          A unique form field chosen for the key for each file
                          in the multi-part form-data post
                        example: file1
                  - $ref: '#/components/schemas/DB-Object'
                  - $ref: '#/components/schemas/DB-Metadata'
                  - $ref: '#/components/schemas/DB-Tags'
                  - $ref: '#/components/schemas/S3-Object'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Deletes an object or a version of object
      description: >-
        Deletes the specified object (or version) from S3. If the object storage
        supports versioning, precise S3 version stack manipulation is supported,
        including soft-deletion and soft-restore. Hard-deletions on S3 are also
        supported. For more details on general S3 version behavior, visit
        https://docs.aws.amazon.com/AmazonS3/latest/userguide/DeletingObjectVersions.html
      operationId: deleteObject
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-VersionId-Delete'
      responses:
        '200':
          description: Object or version was deleted from object storage and COMS database
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Response-ObjectDeleted'
                  - $ref: '#/components/schemas/Response-VersionDeleted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /object/{objId}/version:
    get:
      summary: Returns the object version history
      description: Returns an array of an object's version history
      operationId: listObjectVersion
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
      responses:
        '200':
          description: Returns an array of versions for a specific object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3-VersionList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /object/{objId}/public:
    patch:
      summary: Sets the public flag of an object
      description: >-
        Toggles the public property for an object. Sets public to false if
        public query parameter is not specified.
      operationId: togglePublic
      tags:
        - Object
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-Public'
      responses:
        '200':
          description: Returns the object information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DB-Object'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /object/{objId}/metadata:
    patch:
      summary: Adds metadata to an object
      description: >-
        Creates a copy and new version of the object with the given metadata
        added to the object. Multiple Key/Value pairs can be provided in the
        header for the metadata.
      operationId: addMetadata
      tags:
        - Object Metadata
      parameters:
        - $ref: '#/components/parameters/Header-Metadata'
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-VersionId'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Replaces metadata of an object
      description: >-
        Creates a copy and new version of the object with the given metadata
        replacing the existing. Multiple Key/Value pairs can be provided in the
        header for the metadata.
      operationId: replaceMetadata
      tags:
        - Object Metadata
      parameters:
        - $ref: '#/components/parameters/Header-Metadata'
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-VersionId'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete metadata of an object.
      description: >-
        Creates a copy and new version of the object with the given metadata
        removed. Multiple Key/Value pairs can be provided in the header for the
        metadata. If no metadata headers are given then all metadata will be
        removed. Metadata headers `name` and `id` are mandatory and will always
        persist.
      operationId: deleteMetadata
      tags:
        - Object Metadata
      parameters:
        - $ref: '#/components/parameters/Header-Metadata'
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-VersionId'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /object/tagging:
    get:
      summary: Returns a list of matching tags
      description: >-
        Gets a list of tags matching the given parameters. Multiple Key/Value pairs
        can be provided in the query to narrow down results. If none are provided the full set of tags will be returned.
      operationId: getTagging
      tags:
        - Object Tagging
      parameters:
        - $ref: '#/components/parameters/Query-TagSet'
      responses:
        '200':
          description: Returns an array of matching key/value pairs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/S3-TagSet'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/Error'
  /object/{objId}/tagging:
    patch:
      summary: Adds tags to an object
      description: >-
        Adds a specified set of tags to the object. Multiple Key/Value pairs
        can be provided in the query.
      operationId: addTagging
      tags:
        - Object Tagging
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-TagSet'
        - $ref: '#/components/parameters/Query-VersionId'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Replaces tags of an object
      description: >-
        Replace the existing tag-set of an object with the set of given tags.
        Multiple Key/Value pairs can be provided in the query.
      operationId: replaceTagging
      tags:
        - Object Tagging
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-TagSet'
        - $ref: '#/components/parameters/Query-VersionId'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete tags of an object.
      description: >-
        Removes the specified set of tags from the object. Multiple Key/Value
        pairs can be provided in the query. All tags in the tag-set will be
        removed from the object if no tags are specified.
      operationId: deleteTagging
      tags:
        - Object Tagging
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-TagSet'
        - $ref: '#/components/parameters/Query-VersionId'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /permission/object:
    get:
      summary: Search for object permissions
      description: >-
        Returns an array of permissions meeting the filtering parameters
        provided
      operationId: objectSearchPermissions
      security:
        - BasicAuth: []
      tags:
        - Object Permission
      parameters:
        - $ref: '#/components/parameters/Query-BucketId'
        - $ref: '#/components/parameters/Query-ObjectId'
        - $ref: '#/components/parameters/Query-UserId'
        - $ref: '#/components/parameters/Query-PermCode'
      responses:
        '200':
          description: >-
            Returns an array of objectId/userId/permCode triplets that match the
            provided parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    objectId:
                      type: string
                      format: uuid
                      description: The unique identifier for the object
                      example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
                    permissions:
                      type: array
                      items:
                        $ref: '#/components/schemas/DB-ObjectPermission'

        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'

  /permission/object/{objId}:
    get:
      summary: Returns the object permissions
      description: >-
        Returns an array of object permissions for a specific object meeting the
        filtering parameters provided
      operationId: objectListPermissions
      tags:
        - Object Permission
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-UserId'
        - $ref: '#/components/parameters/Query-PermCode'
      responses:
        '200':
          description: >-
            Returns an array of objectId/userId/permCode triplets that match the
            provided parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-ObjectPermission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Grants object permissions to users
      description: >-
        Adds permissions for a specific object to users by specifying an
        arbitrary array of permCode and user tuples. This is an idempotent
        operation, so users that already have a requested permission will remain
        unaffected. Only permissions successfully added to COMS will appear in
        the response.
      operationId: objectAddPermissions
      tags:
        - Object Permission
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-BucketId'
      requestBody:
        description: An array of objects, each containing a `permCode` and `userId`
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Request-PermissionTuple'
      responses:
        '201':
          description: Returns an array of added permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-ObjectPermission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Deletes permissions for an object
      description: >-
        Removes permissions for a specific object by optionally specifying a set
        of users and subset of permissions to revoke. This is an idempotent
        operation, so users that already lack the specified permission(s) will
        remain unaffected. Only permissions successfully removed from COMS will
        appear in the response. WARNING: Specifying no parameters will delete
        all permissions associated with an object; it is possible to lock
        yourself out of your own object!
      operationId: objectRemovePermissions
      tags:
        - Object Permission
      parameters:
        - $ref: '#/components/parameters/Path-ObjectId'
        - $ref: '#/components/parameters/Query-UserId'
        - $ref: '#/components/parameters/Query-PermCode'
      responses:
        '200':
          description: Returns an array of deleted permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-ObjectPermission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /permission/bucket:
    get:
      summary: Searches for bucket permissions
      description: >-
        Returns an array of buckets and their permissions meeting the filtering parameters
        provided
      operationId: bucketSearchPermissions
      security:
        - BasicAuth: []
      tags:
        - Bucket Permission
      parameters:
        - $ref: '#/components/parameters/Query-ObjectPerms'
        - $ref: '#/components/parameters/Query-BucketId'
        - $ref: '#/components/parameters/Query-UserId'
        - $ref: '#/components/parameters/Query-PermCode'
      responses:
        '200':
          description: >-
            Returns an array of bucketIds and permissions that match the
            provided parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    bucketId:
                      type: string
                      format: uuid
                      description: The unique identifier for the bucket
                      example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
                    permissions:
                      type: array
                      items:
                        $ref: '#/components/schemas/DB-BucketPermission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'

  /permission/bucket/{bucketId}:
    get:
      summary: Returns the bucket permissions
      description: >-
        Returns an array of permissions for a specific bucket meeting the
        filtering parameters provided
      operationId: bucketListPermissions
      tags:
        - Bucket Permission
      parameters:
        - $ref: '#/components/parameters/Path-BucketId'
        - $ref: '#/components/parameters/Query-UserId'
        - $ref: '#/components/parameters/Query-PermCode'
      responses:
        '200':
          description: >-
            Returns an array of bucketId/userId/permCode triplets that match the
            provided parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-BucketPermission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Grants bucket permissions to users
      description: >-
        Adds permissions for a specific bucket to users by specifying an
        arbitrary array of permCode and user tuples. This is an idempotent
        operation, so users that already have a requested permission will remain
        unaffected. Only permissions successfully added to COMS will appear in
        the response.
      operationId: bucketAddPermissions
      tags:
        - Bucket Permission
      parameters:
        - $ref: '#/components/parameters/Path-BucketId'
      requestBody:
        description: An array of bucket permissions, each containing a `userId` and `permCode`
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Request-PermissionTuple'
      responses:
        '201':
          description: Returns an array of added permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-BucketPermission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Deletes permissions for a bucket
      description: >-
        Removes permissions for a specific bucket by optionally specifying a set
        of users and subset of permissions to revoke. This is an idempotent
        operation, so users that already lack the specified permission(s) will
        remain unaffected. Only permissions successfully removed from COMS will
        appear in the response. WARNING: Specifying no parameters will delete
        all permissions associated with a bucket; it is possible to lock
        yourself out of your own bucket!
      operationId: bucketRemovePermissions
      tags:
        - Bucket Permission
      parameters:
        - $ref: '#/components/parameters/Path-BucketId'
        - $ref: '#/components/parameters/Query-UserId'
        - $ref: '#/components/parameters/Query-PermCode'
      responses:
        '200':
          description: Returns an array of deleted permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-BucketPermission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /user:
    get:
      summary: Search for users
      description: >-
        Returns a list of users based on the provided filtering parameters. At
        least one query parameter should be present.
      operationId: searchUsers
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/Query-UserId'
        - $ref: '#/components/parameters/Query-IdentityId'
        - $ref: '#/components/parameters/Query-Idp'
        - $ref: '#/components/parameters/Query-Username'
        - $ref: '#/components/parameters/Query-Email'
        - $ref: '#/components/parameters/Query-FirstName'
        - $ref: '#/components/parameters/Query-FullName'
        - $ref: '#/components/parameters/Query-LastName'
        - $ref: '#/components/parameters/Query-Active'
        - $ref: '#/components/parameters/Query-UserSearch'
      responses:
        '200':
          description: >-
            Returns a JSON object representation of the user matching provided
            parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /user/idpList:
    get:
      summary: Lists all identity providers
      description: Returns a list of all currently known identity providers
      operationId: listIdps
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/Query-Active'
      responses:
        '200':
          description: Returns a JSON array of known identity providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DB-IdentityProvider'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
components:
  headers:
    Content-Disposition:
      description: Specifies presentational information for the object
      schema:
        type: string
      example: attachment; filename="foobar.txt"
    Content-Length:
      description: Size of the body in bytes
      schema:
        type: integer
      example: 529
    Content-Type:
      description: A standard MIME type describing the format of the object data
      schema:
        type: string
      example: text/plain; charset=utf-8
    ETag:
      description: >-
        An entity tag (ETag) is an opaque identifier assigned by a web server to
        a specific version of a resource found at a URL
      schema:
        type: integer
      example: '"9d1aaa54b84e1d6ccc6e0477c5717fe3"'
    Last-Modified:
      description: Creation date of the object
      schema:
        type: string
        format: date-time
      example: Fri March 11 2022 15:42:05 GMT-0700 (Pacific Daylight Time)
    Location:
      description: URL Location of the moved resource
      schema:
        type: string
      example: >-
        https://your.objectstore.com/yourbucket/coms/env/00000000-0000-0000-0000-000000000000?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=credential%2F20220411%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220411T204528Z&X-Amz-Expires=300&X-Amz-Signature=SIGNATURE&X-Amz-SignedHeaders=host&x-id=GetObject
    x-amz-server-side-encryption:
      description: >-
        If the object is stored using server-side encryption either with an AWS
        KMS key or an Amazon S3-managed encryption key, the response includes
        this header with the value of the server-side encryption algorithm used
        when storing this object in Amazon S3 (for example, AES256, aws:kms).
      schema:
        type: string
      example: AES256
    x-amz-version-id:
      description: Version of the object
      schema:
        type: string
      example: 1649457725874
    x-amz-meta-id:
      description: The Object ID
      schema:
        type: string
      example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    x-amz-meta-name:
      description: The original filename of the object
      schema:
        type: string
      example: foobar.txt
  parameters:
    Header-Metadata:
      in: header
      name: x-amz-meta-*
      description: >-
        An arbitrary metadata key/value pair. Must contain the x-amz-meta-
        prefix to be valid. Multiple metadata pairs can be defined.
        keys must be unique and will be converted to lowercase.
      schema:
        type: string
        example:
          - x-amz-meta-foo
          - x-amz-meta-bar
          - x-amz-meta-baz
    Path-BucketId:
      in: path
      name: bucketId
      description: Uuid or array of uuids representing the bucket
      required: true
      schema:
        type: string
        format: uuid
        example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    Path-ObjectId:
      in: path
      name: objId
      description: Uuid of an object
      required: true
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    Query-Active:
      in: query
      name: active
      description: Boolean on active status
      schema:
        type: boolean
        example: true
    Query-Download:
      in: query
      name: download
      description: >-
        Download mode behavior. Default behavior (undefined) will yield an
        HTTP 302 redirect to the S3 bucket via presigned URL. If `proxy` is
        specified, the object contents will be available proxied through COMS.
        If `url` is specified, expect an HTTP 201 cotaining the presigned URL
        as a JSON string in the response.
      schema:
        $ref: '#/components/schemas/DownloadMode'
    Query-Email:
      in: query
      name: email
      description: Search by specific email
      schema:
        type: string
        example: bobsmith@gov.bc.ca
    Query-ExpiresIn:
      in: query
      name: expiresIn
      description: How many seconds the pre-signed URL should remain valid for
      schema:
        type: integer
        format: int32
        default: 300
        example: 300
    Query-IdentityId:
      in: query
      name: identityId
      description: >-
        String or array of strings representing the user (identified by optional KC_IDENTITYKEY env variable)
      schema:
        oneOf:
          - type: string
            example: 5dad1ec9d3c04b0f8eadcb4d9fa98987
          - type: array
            items:
              type: string
              example: 5dad1ec9d3c04b0f8eadcb4d9fa98987
    Query-FirstName:
      in: query
      name: firstName
      description: Search by specific first name
      schema:
        type: string
        example: bob
    Query-FullName:
      in: query
      name: fullName
      description: Search by specific full name
      schema:
        type: string
        example: bob smith
    Query-Idp:
      in: query
      name: idp
      description: >-
        Idp or array of idps representing the identity provider(s) (i.e. `idir`,
        `bceid-basic`, etc)
      schema:
        oneOf:
          - type: string
            example: idir
          - type: array
            items:
              type: string
              example: idir
    Query-LastName:
      in: query
      name: lastName
      description: Search by specific last name
      schema:
        type: string
        example: smith
    Query-MessageId:
      in: query
      name: msgId
      description: Uuid of a message
      schema:
        type: string
        format: uuid
        example: 00000000-0000-0000-0000-000000000000
    Query-MimeType:
      in: query
      name: mimeType
      description: The object MIME Type
      schema:
        type: string
        example: application/octet-stream
    Query-ObjectId:
      in: query
      name: objId
      description: Uuid or array of uuids representing the object
      schema:
        oneOf:
          - type: string
            format: uuid
            example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
          - type: array
            items:
              type: string
              format: uuid
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    Query-BucketId:
      in: query
      name: bucketId
      description: Uuid or array of uuids representing the bucket
      schema:
        oneOf:
          - type: string
            format: uuid
            example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
          - type: array
            items:
              type: string
              format: uuid
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    Query-BucketName:
      in: query
      name: name
      description: >-
        A display name given to the bucket on creation
      schema:
        type: string
        example: Environmental Documents
    Query-ObjectPerms:
      in: query
      name: objectPerms
      description: Boolean representing whether or not to include buckets containing objects with permissions
      schema:
        type: boolean
        example: true/false
    Query-Key:
      in: query
      name: key
      description: The prefix given to objects in the bucket
      schema:
        type: string
        example: coms/env
    Query-Name:
      in: query
      name: name
      description: >-
        the `name` metadata for the object Typically a descriptive title or
        original filename
      schema:
        type: string
        example: foobar.txt
    Query-Path:
      in: query
      name: path
      description: The canonical S3 path string of the object
      schema:
        type: string
        example: coms/env/ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    Query-PermCode:
      in: query
      name: permCode
      description: the permission type
      schema:
        oneOf:
          - $ref: '#/components/schemas/PermCode'
          - type: array
            items:
              $ref: '#/components/schemas/PermCode'
    Query-Public:
      in: query
      name: public
      description: Boolean on public status
      schema:
        type: boolean
        example: true
    Query-TagSet:
      in: query
      name: tagset[*]
      description: >-
        Tags for the object, defined as a Key/Value tag. The query must
        be formatted in deepObject style notation, where a tag-set made out of
        multiple tags would be encoded something similar to
        `tagset[x]=a&tagset[y]=b`. Only one value can exist for a given tag key.
      schema:
        $ref: '#/components/schemas/S3-TagSet'
      style: deepObject
      explode: true
    Query-UserSearch:
      in: query
      name: search
      description: >-
        General OR search across username, email and fullName. Intended for use
        in freetext searches or autofilling fields.
      schema:
        type: string
        example: smith
    Query-UserId:
      in: query
      name: userId
      description: Uuid or array of uuids representing the user
      schema:
        oneOf:
          - type: string
            format: uuid
            example: 00000000-0000-0000-0000-000000000000
          - type: array
            items:
              type: string
              format: uuid
              example: 00000000-0000-0000-0000-000000000000
    Query-Username:
      in: query
      name: username
      description: Search by specific username
      schema:
        type: string
        example: bobsmith
    Query-VersionId:
      in: query
      name: versionId
      description: Request a specified version
      schema:
        type: string
        description: a version identifier created in S3
        example: '1647462569641'
    Query-VersionId-Delete:
      in: query
      name: versionId
      description: delete a specified version
      schema:
        type: string
        description: a version identifier created in S3
        example: '1647462569641'
  schemas:
    DB-Bucket:
      allOf:
        - type: object
          required:
            - accessKeyId
            - active
            - bucket
            - bucketId
            - bucketName
            - endpoint
            - key
            - region
            - secretAccessKey
          properties:
            accessKeyId:
              type: string
              description: The access key id
              example: 0000000000000+1111111111111
            active:
              type: boolean
              description: Determines whether this bucket is considered active
              default: true
              example: true
            bucket:
              type: string
              description: The parent directory
              example: parentDirectory
            bucketId:
              type: string
              description: The primary identifier for this bucket
              format: uuid
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            bucketName:
              type: string
              description: The primary name for this bucket
              example: bucketName
            endpoint:
              type: string
              description: The bucket resources end point (URL)
              example: https://s3.dot.dot.dot
            key:
              type: string
              description: The prefix to path of all objects in the bucket
              example: coms/env
            region:
              type: string
              description: The region
              example: region name
            secretAccessKey:
              example: REDACTED
        - $ref: '#/components/schemas/DB-TimestampUserData'
    DB-IdentityProvider:
      allOf:
        - type: object
          required:
            - idp
            - active
          properties:
            idp:
              type: string
              description: The identity provider string
              example: idir
            active:
              type: boolean
              description: Determines whether this identity provider is considered active
              default: true
              example: true
        - $ref: '#/components/schemas/DB-TimestampUserData'
    DB-Object:
      allOf:
        - type: object
          required:
            - id
            - path
            - public
            - active
          properties:
            id:
              type: string
              description: The primary identifier for this object
              format: uuid
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            path:
              type: string
              description: The canonical S3 path string of the object
              example: coms/env/ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            public:
              type: boolean
              description: Determines whether this object is publicly accessible
              default: false
              example: false
            active:
              type: boolean
              description: Determines whether this object is considered active
              default: true
              example: true
        - $ref: '#/components/schemas/DB-TimestampUserData'
    DB-Metadata:
      allOf:
        - type: object
          required:
            - metadata
          properties:
            metadata:
              type: object
              description: User-defined metadata
              example:
                name: report.xls
                department: finance
                id: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    DB-ObjectPermission:
      allOf:
        - type: object
          required:
            - id
            - objectId
            - userId
            - permCode
          properties:
            id:
              type: string
              format: uuid
              description: The unique identifier for this permission tuple
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            objectId:
              type: string
              format: uuid
              description: The unique identifier for the object
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            userId:
              type: string
              format: uuid
              description: The unique identifier of the user
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            permCode:
              $ref: '#/components/schemas/PermCode'
        - $ref: '#/components/schemas/DB-TimestampUserData'
    DB-BucketPermission:
      allOf:
        - type: object
          required:
            - id
            - bucketId
            - userId
            - permCode
          properties:
            id:
              type: string
              format: uuid
              description: The unique identifier for this permission tuple
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            bucketId:
              type: string
              format: uuid
              description: The unique identifier for the bucket
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            userId:
              type: string
              format: uuid
              description: The unique identifier of the user
              example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
            permCode:
              $ref: '#/components/schemas/PermCode'
        - $ref: '#/components/schemas/DB-TimestampUserData'
    DB-Tags:
      allOf:
        - type: object
          properties:
            tags:
              type: object
              description: User-defined tags
              example:
                classification: Top Secret
                Priority: Urgent
    DB-TimestampUserData:
      type: object
      required:
        - createdBy
        - createdAt
        - updatedBy
        - updatedAt
      properties:
        createdBy:
          type: string
          format: uuid
          description: >-
            The subject id of the current user if request was authenticated with
            a Bearer token (ex. JWT), or a 'nil' uuid if request was
            authenticated via Basic auth
          example: 72cf13d7-aef7-4ad5-8ddd-0ff23eefb442
        createdAt:
          type: string
          format: date-time
          description: Time when this record was created
          example: '2022-03-11T23:19:16.343Z'
        updatedBy:
          type: string
          format: uuid
          description: >-
            The subject id of the current user if request was authenticated with
            a Bearer token (ex. JWT), or a 'nil' uuid if request was
            authenticated via Basic auth
          default: null
          example: 72cf13d7-aef7-4ad5-8ddd-0ff23eefb442
        updatedAt:
          type: string
          format: date-time
          description: Time when this record was last updated
          example: '2022-03-11T23:19:16.343Z'
    DB-User:
      allOf:
        - type: object
          properties:
            userId:
              type: string
              description: Subject id of the user (Usually the sub claim in a JWT)
              example: 5dad1ec9-d3c0-4b0f-8ead-cb4d9fa98987
            identityId:
              type: string
              description: >-
                Identity id of the user (Usually the sub claim in a JWT but can
                be redefined to a different claim with the `KC_IDENTITYKEY` env
                variable)
              example: 5dad1ec9d3c04b0f8eadcb4d9fa98987
            idp:
              type: string
              description: Identity provider used by the OIDC server
              example: idir
            email:
              type: string
              description: Registered email for this user
              example: jsmith@gov.bc.ca
            username:
              type: string
              description: Username of this user
              example: jsmith
            firstName:
              type: string
              description: First name of this user
              example: Jane
            lastName:
              type: string
              description: Last name of this user
              example: Smith
            active:
              type: boolean
              description: Determines whether this user is considered active
              default: true
              example: true
        - $ref: '#/components/schemas/DB-TimestampUserData'
    DownloadMode:
      type: string
      description: Download mode behavior overrides
      enum:
        - proxy
        - url
      example: proxy
    PermCode:
      type: string
      description: Permission code/type
      enum:
        - CREATE
        - READ
        - UPDATE
        - DELETE
        - MANAGE
      example: UPDATE
    Request-PermissionTuple:
      type: object
      required:
        - userId
        - permCode
      properties:
        permCode:
          $ref: '#/components/schemas/PermCode'
        userId:
          type: string
          description: The primary identifier for a user
          format: uuid
          example: ac246e31-c807-496c-bc93-cd8bc2f1b2b4
    Response-BadRequest:
      allOf:
        - $ref: '#/components/schemas/Response-Problem'
        - type: object
          properties:
            status:
              example: 400
            title:
              example: Bad Request
            type:
              example: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400
    Response-Bucket:
      title: Bucket
      type: object
      $ref: '#/components/schemas/DB-Bucket'
    Response-Conflict:
      allOf:
        - $ref: '#/components/schemas/Response-Problem'
        - type: object
          properties:
            status:
              example: 409
            title:
              example: Conflict
            type:
              example: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409
    Response-Error:
      allOf:
        - $ref: '#/components/schemas/Response-Problem'
        - type: object
          properties:
            status:
              example: 500
            title:
              example: Internal Server Error
            type:
              example: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
    Response-Forbidden:
      allOf:
        - $ref: '#/components/schemas/Response-Problem'
        - type: object
          properties:
            type:
              example: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403
            title:
              example: Forbidden
            status:
              example: 403
            detail:
              example: User lacks permission to complete this action
    Response-NotFound:
      allOf:
        - $ref: '#/components/schemas/Response-Problem'
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404
    Response-NotImplemented:
      allOf:
        - $ref: '#/components/schemas/Response-Problem'
        - type: object
          properties:
            status:
              example: 501
            title:
              example: This action is not supported in the current authentication mode
            type:
              example: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/501
    Response-ObjectDeleted:
      title: Object Deleted
      type: object
      properties:
        $metadata:
          $ref: '#/components/schemas/S3-Metadata'
        DeleteMarker:
          type: boolean
        VersionId:
          type: integer
          format: int32
          description: a version identifier created in S3
          example: 1647462569641
    Response-PresignedURL:
      title: Presigned URL
      type: string
      description: A Presigned S3 URL
      example: >-
        https://your.objectstore.com/yourbucket/coms/env/00000000-0000-0000-0000-000000000000?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=credential%2F20220411%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20220411T204528Z&X-Amz-Expires=300&X-Amz-Signature=SIGNATURE&X-Amz-SignedHeaders=host&x-id=GetObject
    Response-Problem:
      required:
        - type
        - title
        - status
      properties:
        type:
          type: string
          description: What type of problem, link to explanation of problem
        title:
          type: string
          description: Title of problem, generally the Http Status Code description
        status:
          type: string
          description: The Http Status code
        detail:
          type: string
          description: Short description of why this problem was raised.
        errors:
          type: array
          items:
            type: object
            required:
              - message
            properties:
              value:
                type: object
                description: Contents of the field that was in error.
              message:
                type: string
                description: The error message for the field.
    Response-Unauthorized:
      allOf:
        - $ref: '#/components/schemas/Response-Problem'
        - type: object
          properties:
            type:
              example: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401
            title:
              example: Unauthorized
            status:
              example: 401
            detail:
              example: Invalid authorization credentials
    Response-ValidationError:
      allOf:
        - $ref: '#/components/schemas/Response-Problem'
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                type: object
                required:
                  - message
                properties:
                  value:
                    type: object
                    description: Contents of the field that was in error.
                    example: utf-8x
                  message:
                    type: string
                    description: The error message for the field.
                    example: Invalid value `encoding`.
            status:
              example: 422
            title:
              example: Unprocessable Entity
            type:
              example: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422
    Response-VersionDeleted:
      title: Version Deleted
      type: object
      properties:
        $metadata:
          $ref: '#/components/schemas/S3-Metadata'
        VersionId:
          type: string
          description: a version identifier created in S3
          example: 1647462569641
    S3-Metadata:
      type: object
      required:
        - httpStatusCode
        - extendedRequestId
      properties:
        httpStatusCode:
          type: integer
          description: S3 Endpoint internal HTTP code
          example: 200
        extendedRequestId:
          type: string
          description: S3 Endpoint unique internal request id
          example: a0ec1be0a99a08aee6026ba9756da40327f2d3ce844499b7ee752082f3fb22e3
        attempts:
          type: integer
          description: Number of attempts performed by S3
          example: 1
        totalRetryDelay:
          type: integer
          description: S3 delay for retries
          example: 0
    S3-Object:
      type: object
      required:
        - $metadata
        - ETag
      properties:
        $metadata:
          $ref: '#/components/schemas/S3-Metadata'
        ETag:
          type: string
          description: S3 Identifier for a specific version of this object
          example: '"9d1aaa54b84e1d6ccc6e0477c5717fe3"'
        ServerSideEncryption:
          type: string
          description: >-
            If the object is stored using server-side encryption either with an
            AWS KMS key or an Amazon S3-managed encryption key, this field
            specifies the server-side encryption algorithm used when storing
            this object in Amazon S3 (for example, AES256, aws:kms).
          example: AES256
        VersionId:
          type: string
          description: a version identifier created in S3
          example: 1647462569641
    S3-TagSet:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          description: The tag key
          example: x
        value:
          type: string
          description: The tag value
          example: a
    S3-Version:
      type: object
      required:
        - ETag
        - Size
        - StorageClass
        - VersionId
        - IsLatest
        - LastModified
      properties:
        ETag:
          type: string
          description: S3 Identifier for a specific version of this object
          example: 9d1aaa54b84e1d6ccc6e0477c5717fe3
        Size:
          type: integer
          description: Size of the object in bytes
          example: 529
        StorageClass:
          description: >-
            S3 storage classes based on the data access, resiliency, and cost
            requirements of your workloads
          example: STANDARD
        key:
          description: Key of the object
        VersionId:
          type: string
          description: a version identifier created in S3
          example: 1647462569641
        IsLatest:
          description: >-
            Specifies whether the object is (true) or is not (false) the latest
            version of an object.
        LastModified:
          type: string
          format: date-time
          example: '2022-03-11T23:19:16.343Z'
        Owner:
          $ref: '#/components/schemas/S3-VersionOwner'
    S3-VersionList:
      type: object
      required:
        - $metadata
        - IsTruncated
        - MaxKeys
        - Name
        - Prefix
        - Versions
      properties:
        $metadata:
          $ref: '#/components/schemas/S3-Metadata'
        IsTruncated:
          type: boolean
          description: Whether or not this object listing is complete
          example: false
        KeyMarker:
          type: string
          description: Marks the last key returned in a truncated response
          example: ''
        MaxKeys:
          type: integer
          format: int32
          description: >-
            Sets the maximum number of keys returned in the response. By default
            the action returns up to 1,000 key names. The response might contain
            fewer keys but will never contain more.
          example: 1000
        Name:
          type: string
          description: Name of the S3 bucket
        Prefix:
          type: string
          description: Keys that begin with the indicated prefix
          example: coms/env/ac246e31-c807-496c-bc93-cd8bc2f1b2b4
        VersionIdMarker:
          type: string
          description: Marks the last version of the key returned in a truncated response
          example: ''
        Versions:
          type: array
          items:
            $ref: '#/components/schemas/S3-Version'
    S3-VersionOwner:
      type: object
      required:
        - DisplayName
        - ID
      properties:
        DisplayName:
          type: string
          description: The bucket accessKeyId/owner
          example: abcdef
        ID:
          type: string
          description: The bucket accessKeyId/owner
          example: abcdef
  responses:
    Accepted:
      description: Accepted
    BadRequest:
      description: Request is missing content or is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response-BadRequest'
    Bucket:
      description: Bucket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response-Bucket'
    Conflict:
      description: Request conflicts with server state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response-Conflict'
    Error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response-Error'
    Found:
      description: Resource requested has been temporarily moved
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response-Forbidden'
    NoContent:
      description: Accepted and no content
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response-NotFound'
    NotImplemented:
      description: >-
        The server does not support the functionality required to fulfill the
        request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response-NotImplemented'
    NotModified:
      description: Not Modified
    S3Found:
      description: Returns a temporary pre-signed S3 object URL location header
      headers:
        Location:
          $ref: '#/components/headers/Location'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response-Unauthorized'
    UnprocessableEntity:
      description: >-
        The server was unable to process the contained instructions. Generally
        validation error(s).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response-ValidationError'
  securitySchemes:
    BasicAuth:
      type: http
      description: Basic auth via environment defined username and password
      scheme: basic
    BearerAuth:
      type: http
      description: Bearer token auth using an OIDC issued JWT token
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      description: OpenID Connect endpoint for acquiring JWT tokens
      openIdConnectUrl: >-
        https://logonproxy.gov.bc.ca/auth/realms/your-realm-name/.well-known/openid-configuration
